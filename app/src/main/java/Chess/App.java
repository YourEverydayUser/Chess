/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Chess;

import GameSession.GameSession;
import Pieces.Field;
import Pieces.Figures.Figure;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class App {

    public static void main(String[] args) throws IOException {
        GameSession gameSession = GameSession.getInstance();
        JFrame frame = new JFrame();
        ChessBoardPanel chessBoardPanel = new ChessBoardPanel(gameSession.accessBoard().getGameBoard());
        gameSession.addObserver(chessBoardPanel);
        setupMenuBar(frame, gameSession, chessBoardPanel);
        setUpFrame(frame, chessBoardPanel);
        JMenuItem restartButton = frame.getJMenuBar().getMenu(0).getItem(1);

        // Restarting the game
        restartButton.addMouseListener(new MouseAdapter() {
                   @Override
                   public void mousePressed(MouseEvent e) {
                       gameSession.resetGame();
                       chessBoardPanel.repaint();
                       chessBoardPanel.resetBoard(gameSession);
                   }
                });

        // Listening for mouse input
        chessBoardPanel.addMouseListener(new MouseAdapter() {
            private int firstX = -1;
            private int firstY = -1;

            @Override
            public void mousePressed(MouseEvent e) {
                int x = e.getX() / 64;
                int y = e.getY() / 64;

                if ((x < 0 || y < 0) || (x > 7 || y > 7)) {
                    return;
                }

                if (firstX == -1 && firstY == -1) {
                    firstX = x;
                    firstY = y;
                    System.out.println("From field x:" + x + "   y: " + y);
                    Figure figure = gameSession.accessBoard().getGameBoard().get(gameSession.accessBoard().getKeys()[x][y]);
                    if (figure != null) {
                        ArrayList<Field> possibleMoves = gameSession.accessBoard().getValidMoves(figure);
                        chessBoardPanel.paintPossibleMoves(chessBoardPanel.getGraphics(), possibleMoves);
                        for (Field field : possibleMoves) {
                            System.out.println("x =  " + field.getxCoordinate() + "   y =  " + field.getyCoordinate());
                        }
                    }
                } else {
                    Field fromField = gameSession.accessBoard().getKeys()[firstX][firstY];
                    Field toField = gameSession.accessBoard().getKeys()[x][y];
                    int message = gameSession.playTurn(fromField, toField);
                    System.out.println("To field x:" + x + "   y: " + y);
                    switch (message) {
                        case 1 -> {
                            JOptionPane.showMessageDialog(null, "Error: No Figure at the given point");
                            chessBoardPanel.repaint();
                        }
                        case 2 -> {
                            JOptionPane.showMessageDialog(null, "Error: Other players turn");
                            chessBoardPanel.repaint();
                        }
                        case 3 -> {
                            JOptionPane.showMessageDialog(null, "Error: Not a valid move.");
                            chessBoardPanel.repaint();
                        }
                        case 4 -> {
                            JOptionPane.showMessageDialog(null, "Check!!");
                            chessBoardPanel.repaint();
                        }
                        case 5 -> {
                            JOptionPane.showMessageDialog(null, "CheckMate!!");
                            chessBoardPanel.repaint();
                        }
                        case 6 -> chessBoardPanel.repaint();
                    }
                    firstX = -1;
                    firstY = -1;
                }

            }
        });

    }

    private static void setUpFrame(JFrame frame, ChessBoardPanel chessBoardPanel) throws IOException {
        //the game board itself is 512 / 512
        frame.setBounds(100, 100, 700, 700);
        frame.setTitle("Chess");
        Image iconImage = ImageIO.read(new File("C:\\Users\\Fabian\\Desktop\\Chess\\app\\src\\main\\resources\\Pawn_White.png"));
        frame.setIconImage(iconImage);

        frame.add(chessBoardPanel);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }

    private static void setupMenuBar(JFrame frame, GameSession gameSession, ChessBoardPanel chessBoardPanel) {
        JMenuBar menuBar = new JMenuBar();
        frame.setJMenuBar(menuBar);

        JMenu settings = new JMenu("Settings");
        JMenuItem changeColorTheme = new JMenuItem("Change Color Theme");
        JMenuItem restart = new JMenuItem("Restart");
        settings.add(changeColorTheme);
        settings.add(restart);
        menuBar.add(settings);
    }
}
