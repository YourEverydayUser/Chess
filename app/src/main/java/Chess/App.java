/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Chess;
import GameSession.GameSession;
import Pieces.Field;
import Pieces.Figures.Figure;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

public class App {

    public static void main(String[] args) throws IOException {
        GameSession gameSession = GameSession.getInstance();
        JFrame frame = new JFrame();
        HashMap<Field, Figure> board = gameSession.accessBoard().getGameBoard();
        Set<Field> fields = board.keySet();
        Iterator<Field> fieldsIterator = fields.iterator();

        while(fieldsIterator.hasNext()) {
            Field currentField = fieldsIterator.next();
            int x = currentField.getxCoordinate();
            int y = currentField.getyCoordinate();
            currentField.setUpperXBorder(64 + x*64);
            currentField.setLowerXBorder(x*64);
            currentField.setUpperYBorder(64 + 64*y);
            currentField.setLowerYBorder(y*64);
        }

        BufferedImage all= ImageIO.read(new File("C:\\Users\\Fabian\\Desktop\\Chess\\app\\src\\main\\resources\\chess.png"));
        Image[] imgs =new Image[12];
        int ind=0;
        for(int y=0;y<400;y+=200){
            for(int x=0;x<1200;x+=200){
                imgs[ind]=all.getSubimage(x, y, 200, 200).getScaledInstance(64, 64, BufferedImage.SCALE_SMOOTH);
                ind++;
            }
        }
        frame.setBounds(100, 100, 512, 512);
        frame.setUndecorated(true);
        JPanel pn = new JPanel(){
            @Override
            public void paint(Graphics g) {
                for(int x = 0; x < 8; x++) {
                    for(int y = 0; y < 8; y++) {
                        if((x+y) % 2 == 0) {
                            g.setColor(Color.WHITE);
                        } else {
                            g.setColor(Color.darkGray);
                        }
                        g.fillRect(x*64, y*64, 64, 64);
                    }
                }

                String figureType;
                for(Field field : board.keySet()) {
                    int ind=0;
                    Figure figure = board.get(field);

                    if(figure != null) {
                        figureType = figure.getName();
                        switch (figureType) {
                            case ("King") -> ind = figure.getColor() == Pieces.Figures.Color.WHITE ? 0 : 6;
                            case ("Queen") -> ind = figure.getColor() == Pieces.Figures.Color.WHITE ? 1 : 7;
                            case ("Bishop") -> ind = figure.getColor() == Pieces.Figures.Color.WHITE ? 2 : 8;
                            case ("Knight") -> ind = figure.getColor() == Pieces.Figures.Color.WHITE ? 3 : 9;
                            case ("Tower") -> ind = figure.getColor() == Pieces.Figures.Color.WHITE ? 4 : 10;
                            case ("Peasent") -> ind = figure.getColor() == Pieces.Figures.Color.WHITE ? 5 : 11;
                        }
                        g.drawImage(imgs[ind], field.getxCoordinate() * 64, field.getyCoordinate() * 64, this);
                    }
                }
            }
        };

        frame.add(pn);
        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.setVisible(true);

        while(true) {
            try {

                System.out.println("X-Position: " + frame.getMousePosition().x);
                System.out.println("Y-Position: " + frame.getMousePosition().y);
            } catch (NullPointerException e) {

            }
        }

    }
}
